function J = jacobian(~, y, mu, soft)

x = y(1:3, :);

d = sqrt((x(1, :) + mu).^2 + x(2, :).^2 + x(3, :).^2 + soft^2);
r = sqrt((x(1, :) - 1 + mu).^2 + x(2, :).^2 + x(3, :).^2 + soft^2);

dddx = (x(1, :) + mu)./d;
dddy =  x(2, :)./d;
dddz =  x(3, :)./d;
drdx = (x(1, :) - 1 + mu)./r;
drdy =  x(2, :)./r;
drdz =  x(3, :)./r;

dddxdx = (1 - dddx.^2)./d;
dddxdy = -(dddx.*x(2, :))./(d.^2);
dddxdz = -(dddx.*x(3, :))./(d.^2);
dddydy =  (1 - dddy.^2)./d;
dddydz =  -(dddy.*x(3, :))./(d.^2);
dddzdz =  (1 - dddz.^2)./d;

drdxdx = (1 - drdx.^2)./r;
drdxdy = -(drdx.*x(2, :))./(r.^2);
drdxdz = -(drdx.*x(3, :))./(r.^2);
drdydy = (1 - drdy.^2)./r;
drdydz = -(drdy.*x(3, :))./(r.^2);
drdzdz = (1 - drdz.^2)./r;

dUdxdx = 1 + (2*(1 - mu)*dddx.^2)./(d.^3) ...
    - ((1 - mu)*dddxdx)./(d.^2) ...
    + (2*mu*drdx.^2)./(r.^3) ...
    - (mu*drdxdx)./(r.^2);
dUdxdy = (2*(1 - mu)*dddx.*dddy)./(d.^3) ...
    - ((1 - mu)*dddxdy)./(d.^2) ...
    + (2*mu*drdx.*drdy)./(r.^3) ...
    - (mu.*drdxdy)./(r.^2);
dUdxdz = (2*(1 - mu)*dddx.*dddz)./(d.^3) ...
    - ((1 - mu)*dddxdz)./(d.^2) ...
    + (2*mu*drdx.*drdz)./(r.^3) ...
    - (mu.*drdxdz)./(r.^2);
dUdydy = 1 + (2*(1 - mu)*dddy.^2)./(d.^3) ...
    - ((1 - mu)*dddydy)./(d.^2) ...
    + (2*mu*drdy.^2)./(r.^3) ...
    - (mu*drdydy)./(r.^2);
dUdydz = (2*(1 - mu)*dddy.*dddz)./(d.^3) ...
    - ((1 - mu)*dddydz)./(d.^2) ...
    + (2*mu*drdy.*drdz)./(r.^3) ...
    - (mu.*drdydz)./(r.^2);
dUdzdz = (2*(1 - mu)*dddz.^2)./(d.^3) ...
    - ((1 - mu)*dddzdz)./(d.^2) ...
    + (2*mu*drdz.^2)./(r.^3) ...
    - (mu*drdzdz)./(r.^2);

dxdv = [dUdxdx, dUdxdy, dUdxdz; dUdxdy, dUdydy, dUdydz; dUdxdz, dUdydz, dUdzdz];

J = [zeros(3, 3), eye(3); dxdv, [0, 2, 0; -2, 0, 0; 0, 0, 0]];

end
